// Mocks generated by Mockito 5.4.4 from annotations
// in ipotato_timer/test/src/core/audio/audio_player_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:assets_audio_player/assets_audio_player.dart' as _i2;
import 'package:assets_audio_player/src/cache/cache_downloader.dart' as _i7;
import 'package:assets_audio_player/src/network_settings.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:rxdart/rxdart.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMetas_0 extends _i1.SmartFake implements _i2.Metas {
  _FakeMetas_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudio_1 extends _i1.SmartFake implements _i2.Audio {
  _FakeAudio_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkSettings_2 extends _i1.SmartFake
    implements _i3.NetworkSettings {
  _FakeNetworkSettings_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueStream_3<T> extends _i1.SmartFake
    implements _i4.ValueStream<T> {
  _FakeValueStream_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Audio].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudio extends _i1.Mock implements _i2.Audio {
  MockAudio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i2.AudioType get audioType => (super.noSuchMethod(
        Invocation.getter(#audioType),
        returnValue: _i2.AudioType.network,
      ) as _i2.AudioType);

  @override
  _i2.Metas get metas => (super.noSuchMethod(
        Invocation.getter(#metas),
        returnValue: _FakeMetas_0(
          this,
          Invocation.getter(#metas),
        ),
      ) as _i2.Metas);

  @override
  Set<_i2.PlayerEditor> get currentlyOpenedIn => (super.noSuchMethod(
        Invocation.getter(#currentlyOpenedIn),
        returnValue: <_i2.PlayerEditor>{},
      ) as Set<_i2.PlayerEditor>);

  @override
  void updateMetas({
    String? title,
    String? artist,
    String? album,
    Map<String, dynamic>? extra,
    _i2.MetasImage? image,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateMetas,
          [],
          {
            #title: title,
            #artist: artist,
            #album: album,
            #extra: extra,
            #image: image,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Audio copyWith({
    String? path,
    String? package,
    _i2.AudioType? audioType,
    _i2.Metas? metas,
    double? playSpeed,
    Map<String, String>? headers,
    bool? cached,
    _i2.DrmConfiguration? drmConfiguration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #path: path,
            #package: package,
            #audioType: audioType,
            #metas: metas,
            #playSpeed: playSpeed,
            #headers: headers,
            #cached: cached,
            #drmConfiguration: drmConfiguration,
          },
        ),
        returnValue: _FakeAudio_1(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #path: path,
              #package: package,
              #audioType: audioType,
              #metas: metas,
              #playSpeed: playSpeed,
              #headers: headers,
              #cached: cached,
              #drmConfiguration: drmConfiguration,
            },
          ),
        ),
      ) as _i2.Audio);

  @override
  void setCurrentlyOpenedIn(_i2.PlayerEditor? player) => super.noSuchMethod(
        Invocation.method(
          #setCurrentlyOpenedIn,
          [player],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeCurrentlyOpenedIn(_i2.PlayerEditor? player) => super.noSuchMethod(
        Invocation.method(
          #removeCurrentlyOpenedIn,
          [player],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AssetsAudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetsAudioPlayer extends _i1.Mock implements _i2.AssetsAudioPlayer {
  MockAssetsAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i3.NetworkSettings get networkSettings => (super.noSuchMethod(
        Invocation.getter(#networkSettings),
        returnValue: _FakeNetworkSettings_2(
          this,
          Invocation.getter(#networkSettings),
        ),
      ) as _i3.NetworkSettings);

  @override
  set onErrorDo(_i2.AssetsAudioPlayerErrorHandler? _onErrorDo) =>
      super.noSuchMethod(
        Invocation.setter(
          #onErrorDo,
          _onErrorDo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set cachePathProvider(_i2.AssetsAudioPlayerCache? newValue) =>
      super.noSuchMethod(
        Invocation.setter(
          #cachePathProvider,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ValueStream<bool> get isPlaying => (super.noSuchMethod(
        Invocation.getter(#isPlaying),
        returnValue: _FakeValueStream_3<bool>(
          this,
          Invocation.getter(#isPlaying),
        ),
      ) as _i4.ValueStream<bool>);

  @override
  String get getCurrentAudioTitle => (super.noSuchMethod(
        Invocation.getter(#getCurrentAudioTitle),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#getCurrentAudioTitle),
        ),
      ) as String);

  @override
  String get getCurrentAudioArtist => (super.noSuchMethod(
        Invocation.getter(#getCurrentAudioArtist),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#getCurrentAudioArtist),
        ),
      ) as String);

  @override
  Map<String, dynamic> get getCurrentAudioextra => (super.noSuchMethod(
        Invocation.getter(#getCurrentAudioextra),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String get getCurrentAudioAlbum => (super.noSuchMethod(
        Invocation.getter(#getCurrentAudioAlbum),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#getCurrentAudioAlbum),
        ),
      ) as String);

  @override
  _i4.ValueStream<int> get audioSessionId => (super.noSuchMethod(
        Invocation.getter(#audioSessionId),
        returnValue: _FakeValueStream_3<int>(
          this,
          Invocation.getter(#audioSessionId),
        ),
      ) as _i4.ValueStream<int>);

  @override
  _i4.ValueStream<_i2.PlayerState> get playerState => (super.noSuchMethod(
        Invocation.getter(#playerState),
        returnValue: _FakeValueStream_3<_i2.PlayerState>(
          this,
          Invocation.getter(#playerState),
        ),
      ) as _i4.ValueStream<_i2.PlayerState>);

  @override
  _i4.ValueStream<_i2.Playing?> get current => (super.noSuchMethod(
        Invocation.getter(#current),
        returnValue: _FakeValueStream_3<_i2.Playing?>(
          this,
          Invocation.getter(#current),
        ),
      ) as _i4.ValueStream<_i2.Playing?>);

  @override
  _i6.Stream<_i2.PlayingAudio?> get onReadyToPlay => (super.noSuchMethod(
        Invocation.getter(#onReadyToPlay),
        returnValue: _i6.Stream<_i2.PlayingAudio?>.empty(),
      ) as _i6.Stream<_i2.PlayingAudio?>);

  @override
  _i4.ValueStream<bool> get playlistFinished => (super.noSuchMethod(
        Invocation.getter(#playlistFinished),
        returnValue: _FakeValueStream_3<bool>(
          this,
          Invocation.getter(#playlistFinished),
        ),
      ) as _i4.ValueStream<bool>);

  @override
  _i6.Stream<_i2.Playing> get playlistAudioFinished => (super.noSuchMethod(
        Invocation.getter(#playlistAudioFinished),
        returnValue: _i6.Stream<_i2.Playing>.empty(),
      ) as _i6.Stream<_i2.Playing>);

  @override
  _i4.ValueStream<Duration> get currentPosition => (super.noSuchMethod(
        Invocation.getter(#currentPosition),
        returnValue: _FakeValueStream_3<Duration>(
          this,
          Invocation.getter(#currentPosition),
        ),
      ) as _i4.ValueStream<Duration>);

  @override
  _i4.ValueStream<bool> get isBuffering => (super.noSuchMethod(
        Invocation.getter(#isBuffering),
        returnValue: _FakeValueStream_3<bool>(
          this,
          Invocation.getter(#isBuffering),
        ),
      ) as _i4.ValueStream<bool>);

  @override
  _i6.Stream<_i7.CacheDownloadInfos> get cacheDownloadInfos =>
      (super.noSuchMethod(
        Invocation.getter(#cacheDownloadInfos),
        returnValue: _i6.Stream<_i7.CacheDownloadInfos>.empty(),
      ) as _i6.Stream<_i7.CacheDownloadInfos>);

  @override
  _i4.ValueStream<double> get volume => (super.noSuchMethod(
        Invocation.getter(#volume),
        returnValue: _FakeValueStream_3<double>(
          this,
          Invocation.getter(#volume),
        ),
      ) as _i4.ValueStream<double>);

  @override
  _i4.ValueStream<_i2.LoopMode> get loopMode => (super.noSuchMethod(
        Invocation.getter(#loopMode),
        returnValue: _FakeValueStream_3<_i2.LoopMode>(
          this,
          Invocation.getter(#loopMode),
        ),
      ) as _i4.ValueStream<_i2.LoopMode>);

  @override
  _i4.ValueStream<bool> get isShuffling => (super.noSuchMethod(
        Invocation.getter(#isShuffling),
        returnValue: _FakeValueStream_3<bool>(
          this,
          Invocation.getter(#isShuffling),
        ),
      ) as _i4.ValueStream<bool>);

  @override
  _i4.ValueStream<_i2.RealtimePlayingInfos> get realtimePlayingInfos =>
      (super.noSuchMethod(
        Invocation.getter(#realtimePlayingInfos),
        returnValue: _FakeValueStream_3<_i2.RealtimePlayingInfos>(
          this,
          Invocation.getter(#realtimePlayingInfos),
        ),
      ) as _i4.ValueStream<_i2.RealtimePlayingInfos>);

  @override
  _i4.ValueStream<double> get playSpeed => (super.noSuchMethod(
        Invocation.getter(#playSpeed),
        returnValue: _FakeValueStream_3<double>(
          this,
          Invocation.getter(#playSpeed),
        ),
      ) as _i4.ValueStream<double>);

  @override
  _i4.ValueStream<double> get pitch => (super.noSuchMethod(
        Invocation.getter(#pitch),
        returnValue: _FakeValueStream_3<double>(
          this,
          Invocation.getter(#pitch),
        ),
      ) as _i4.ValueStream<double>);

  @override
  _i4.ValueStream<double> get forwardRewindSpeed => (super.noSuchMethod(
        Invocation.getter(#forwardRewindSpeed),
        returnValue: _FakeValueStream_3<double>(
          this,
          Invocation.getter(#forwardRewindSpeed),
        ),
      ) as _i4.ValueStream<double>);

  @override
  bool get shuffle => (super.noSuchMethod(
        Invocation.getter(#shuffle),
        returnValue: false,
      ) as bool);

  @override
  bool get stopped => (super.noSuchMethod(
        Invocation.getter(#stopped),
        returnValue: false,
      ) as bool);

  @override
  bool get respectSilentMode => (super.noSuchMethod(
        Invocation.getter(#respectSilentMode),
        returnValue: false,
      ) as bool);

  @override
  bool get showNotification => (super.noSuchMethod(
        Invocation.getter(#showNotification),
        returnValue: false,
      ) as bool);

  @override
  set showNotification(bool? newValue) => super.noSuchMethod(
        Invocation.setter(
          #showNotification,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set shuffle(dynamic value) => super.noSuchMethod(
        Invocation.setter(
          #shuffle,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> setLoopMode(_i2.LoopMode? value) => (super.noSuchMethod(
        Invocation.method(
          #setLoopMode,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> toggleLoop() => (super.noSuchMethod(
        Invocation.method(
          #toggleLoop,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void toggleShuffle() => super.noSuchMethod(
        Invocation.method(
          #toggleShuffle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> playlistPlayAtIndex(int? index) => (super.noSuchMethod(
        Invocation.method(
          #playlistPlayAtIndex,
          [index],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> previous({bool? keepLoopMode = true}) => (super.noSuchMethod(
        Invocation.method(
          #previous,
          [],
          {#keepLoopMode: keepLoopMode},
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> next({
    bool? stopIfLast = false,
    bool? keepLoopMode = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #next,
          [],
          {
            #stopIfLast: stopIfLast,
            #keepLoopMode: keepLoopMode,
          },
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> updateCurrentAudioNotification({
    _i2.Metas? metas,
    bool? showNotifications = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCurrentAudioNotification,
          [],
          {
            #metas: metas,
            #showNotifications: showNotifications,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> open(
    _i2.Playable? playable, {
    bool? autoStart = true,
    double? volume,
    bool? respectSilentMode = false,
    bool? showNotification = false,
    Duration? seek,
    double? playSpeed,
    double? pitch,
    _i2.NotificationSettings? notificationSettings,
    _i2.LoopMode? loopMode = _i2.LoopMode.none,
    _i2.PlayInBackground? playInBackground = _i2.PlayInBackground.enabled,
    _i2.HeadPhoneStrategy? headPhoneStrategy = _i2.HeadPhoneStrategy.none,
    _i2.AudioFocusStrategy? audioFocusStrategy,
    bool? forceOpen = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [playable],
          {
            #autoStart: autoStart,
            #volume: volume,
            #respectSilentMode: respectSilentMode,
            #showNotification: showNotification,
            #seek: seek,
            #playSpeed: playSpeed,
            #pitch: pitch,
            #notificationSettings: notificationSettings,
            #loopMode: loopMode,
            #playInBackground: playInBackground,
            #headPhoneStrategy: headPhoneStrategy,
            #audioFocusStrategy: audioFocusStrategy,
            #forceOpen: forceOpen,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> playOrPause() => (super.noSuchMethod(
        Invocation.method(
          #playOrPause,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> seek(
    Duration? to, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #seek,
          [to],
          {#force: force},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> forwardOrRewind(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #forwardOrRewind,
          [speed],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> seekBy(Duration? by) => (super.noSuchMethod(
        Invocation.method(
          #seekBy,
          [by],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setPlaySpeed(double? playSpeed) => (super.noSuchMethod(
        Invocation.method(
          #setPlaySpeed,
          [playSpeed],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setPitch(double? pitch) => (super.noSuchMethod(
        Invocation.method(
          #setPitch,
          [pitch],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
