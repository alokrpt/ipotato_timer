// Mocks generated by Mockito 5.4.4 from annotations
// in ipotato_timer/test/src/features/task_item/presentation/cubit/task_item_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:either_dart/either.dart' as _i5;
import 'package:ipotato_timer/src/core/audio/audio_player.dart' as _i9;
import 'package:ipotato_timer/src/core/error/custom_error.dart' as _i6;
import 'package:ipotato_timer/src/features/task_item/domain/repositories/task_item_repository.dart'
    as _i2;
import 'package:ipotato_timer/src/features/task_item/domain/usecases/delete_task_use_case.dart'
    as _i8;
import 'package:ipotato_timer/src/features/task_item/domain/usecases/update_task_use_case.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskItemRepository_0 extends _i1.SmartFake
    implements _i2.TaskItemRepository {
  _FakeTaskItemRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UpdateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUseCase extends _i1.Mock implements _i3.UpdateTaskUseCase {
  MockUpdateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskItemRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskItemRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskItemRepository);

  @override
  _i4.Future<_i5.Either<_i6.CustomError, void>> call(
          _i3.UpdateTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i5.Either<_i6.CustomError, void>>.value(
            _i7.dummyValue<_i5.Either<_i6.CustomError, void>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i5.Either<_i6.CustomError, void>>);
}

/// A class which mocks [DeleteTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTaskUseCase extends _i1.Mock implements _i8.DeleteTaskUseCase {
  MockDeleteTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskItemRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskItemRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskItemRepository);

  @override
  _i4.Future<_i5.Either<_i6.CustomError, void>> call(
          _i8.DeleteTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i5.Either<_i6.CustomError, void>>.value(
            _i7.dummyValue<_i5.Either<_i6.CustomError, void>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i5.Either<_i6.CustomError, void>>);
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i9.AudioPlayer {
  MockAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void play() => super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
