// Mocks generated by Mockito 5.4.4 from annotations
// in ipotato_timer/test/src/features/task_item/domain/usecases/delete_task_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:either_dart/either.dart' as _i4;
import 'package:ipotato_timer/src/core/error/custom_error.dart' as _i5;
import 'package:ipotato_timer/src/features/task_item/domain/repositories/task_item_repository.dart'
    as _i2;
import 'package:ipotato_timer/src/features/task_item/domain/usecases/delete_task_use_case.dart'
    as _i8;
import 'package:ipotato_timer/src/features/task_item/domain/usecases/update_task_use_case.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskItemRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskItemRepository extends _i1.Mock
    implements _i2.TaskItemRepository {
  MockTaskItemRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.CustomError, void>> updateTask(
          _i6.UpdateTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [params],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.CustomError, void>>.value(
            _i7.dummyValue<_i4.Either<_i5.CustomError, void>>(
          this,
          Invocation.method(
            #updateTask,
            [params],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.CustomError, void>>);

  @override
  _i3.Future<_i4.Either<_i5.CustomError, void>> deleteTask(
          _i8.DeleteTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [params],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.CustomError, void>>.value(
            _i7.dummyValue<_i4.Either<_i5.CustomError, void>>(
          this,
          Invocation.method(
            #deleteTask,
            [params],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.CustomError, void>>);
}
